üîÅ Data Fetching & useEffect
Fetch user data from an API and display it in a table.

Fetch a list of countries and populate a searchable dropdown.

Load weather data by city name using OpenWeatherMap API.

Fetch and display a GitHub user's repositories.

Call an API only once when a component mounts.

Retry fetching data on failure with a retry button.

Use loading and error states when fetching products.

Fetch a random joke and allow users to refresh for another one.

Call multiple APIs in parallel and display combined results.

Use debouncing when making API calls based on search input.

üéõ State Management & Forms
Build a controlled form with fields for name, email, and password.

Create a to-do app with add, edit, and delete functionality.

Implement a toggle button to show/hide a component.

Build a simple calculator using React state.

Create a multi-step form that maintains data across steps.

Highlight selected rows from a list of items.

Update a UI element when a button is clicked (e.g., like counter).

Track mouse position on screen using state.

Toggle dark/light mode and persist the preference using localStorage.

Build a dynamic form that renders fields based on a dropdown value.

üì¶ List Rendering & Filtering
Display a list of movies and filter them by genre.

Sort a list of products by price (ascending/descending).

Paginate an API result set and allow navigation between pages.

Display a leaderboard sorted by score.

Group items alphabetically (e.g., A-Z contacts).

Render a nested list of categories and subcategories.

Render a list of checkboxes and track selected items.

Implement infinite scrolling to load more data on scroll.

Create a search bar to filter blog posts by title.

Display a timeline of events based on date.

‚öôÔ∏è Components & Props
Create a reusable button component that accepts custom text and style.

Build a card component that displays title, image, and description.

Render a list of users using a UserCard component.

Build a modal component and toggle it with a button.

Create a tab component to switch between multiple views.

Build a rating component with clickable stars.

Pass callback functions from parent to child to update data.

Render a product list with conditional discount badges.

Implement a collapsible FAQ section.

Show a banner component only for first-time users.

üß™ Real-world Application Scenarios
Build a product listing page with filter (category, rating) and sort.

Fetch blog posts and allow reading in a modal preview.

Create a currency converter using exchange rate API.

Display weather for the user‚Äôs current location using geolocation.

Implement a basic login form with mock API.

Create a searchable dropdown with remote data.

Upload a profile image and preview it before saving.

Show user notifications and dismiss them manually.

Implement a drag-and-drop list with reorder functionality.

Create a dashboard showing charts using fetched data.

